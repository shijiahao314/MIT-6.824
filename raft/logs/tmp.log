[ INFO] 2023/10/28 21:15:53.362 [0]: rf.readPersist(): read raftstate
[ INFO] 2023/10/28 21:15:53.362 [0]: rf.applyCond.Wait(), rf.commitIndex=[0], rf.lastApplied=[0]
[ INFO] 2023/10/28 21:15:53.362 [1]: rf.readPersist(): read raftstate
[ INFO] 2023/10/28 21:15:53.362 [1]: rf.applyCond.Wait(), rf.commitIndex=[0], rf.lastApplied=[0]
[ INFO] 2023/10/28 21:15:53.362 [2]: rf.readPersist(): read raftstate
[ INFO] 2023/10/28 21:15:53.362 [2]: rf.applyCond.Wait(), rf.commitIndex=[0], rf.lastApplied=[0]
Test (2D): install snapshots (disconnect) ...
[ INFO] 2023/10/28 21:15:53.664 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:53.664 [0]: timeout leader election, rf.currentTerm=[1]
[ INFO] 2023/10/28 21:15:53.664 [2]: <- [0], get vote request, args.Term=[1], rf.currentTerm=[0]
[ INFO] 2023/10/28 21:15:53.664 [2]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:53.664 [1]: <- [0], get vote request, args.Term=[1], rf.currentTerm=[0]
[ INFO] 2023/10/28 21:15:53.664 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:53.664 [1]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:53.664 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:53.664 [2]: upToDate=true, reply=&{1 true}
[ INFO] 2023/10/28 21:15:53.664 [1]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:53.664 [1]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:53.664 [0]: <- [2], get vote, now vote count [2 / 3]
[ INFO] 2023/10/28 21:15:53.664 [1]: upToDate=true, reply=&{1 true}
[ INFO] 2023/10/28 21:15:53.664 [0]: become leader, lastLogIndex=[0], len(rf.log)=[0]
[ INFO] 2023/10/28 21:15:53.664 [0]: <- [1], get vote, now vote count [3 / 3]
[ INFO] 2023/10/28 21:15:53.714 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:53.714 [0]: <- [Client], receive command 6041653890570946898
index=[1], [0 / 3]
[ INFO] 2023/10/28 21:15:53.714 [0]: after receive, rf.log={[{1 1 6041653890570946898}] 1}
[ INFO] 2023/10/28 21:15:53.714 [0]: -> [1], leaderSendAppendEntries, args={1 0 0 -1 [{1 1 6041653890570946898}] 0}
[ INFO] 2023/10/28 21:15:53.714 [0]: -> [2], leaderSendAppendEntries, args={1 0 0 -1 [{1 1 6041653890570946898}] 0}
[ERROR] 2023/10/28 21:15:53.715 [1]: rf.log.lastLog().Index=[0], args.PrevLogIndex=[0]
[ INFO] 2023/10/28 21:15:53.715 [1]: args.Entries=[{1 1 6041653890570946898}], rf.log={[] 0}
[ERROR] 2023/10/28 21:15:53.715 [2]: rf.log.lastLog().Index=[0], args.PrevLogIndex=[0]
[ INFO] 2023/10/28 21:15:53.715 [1]: append [{1 1 6041653890570946898}]
[ INFO] 2023/10/28 21:15:53.715 [2]: args.Entries=[{1 1 6041653890570946898}], rf.log={[] 0}
[ INFO] 2023/10/28 21:15:53.715 [2]: append [{1 1 6041653890570946898}]
[ INFO] 2023/10/28 21:15:53.715 [2]: After append, rf.log={[{1 1 6041653890570946898}] 1}
[ INFO] 2023/10/28 21:15:53.715 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:53.715 [1]: After append, rf.log={[{1 1 6041653890570946898}] 1}
[ INFO] 2023/10/28 21:15:53.715 [1]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:53.715 [0]: -> [2], AppendEntries args=&{1 0 0 -1 [{1 1 6041653890570946898}] 0}
[ INFO] 2023/10/28 21:15:53.715 [0]: <- [2], AppendEntries reply={1 true false 0 0 0}
[ INFO] 2023/10/28 21:15:53.715 [0]: rf.matchIndex[2]=[1], rf.nextIndex[2]=[2]
[ INFO] 2023/10/28 21:15:53.715 [0]: rf.nextIndex[2]=[2]
[ INFO] 2023/10/28 21:15:53.715 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[1]
[ INFO] 2023/10/28 21:15:53.715 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[1]
[ INFO] 2023/10/28 21:15:53.715 [0]: -> [1], AppendEntries args=&{1 0 0 -1 [{1 1 6041653890570946898}] 0}
[ INFO] 2023/10/28 21:15:53.715 [0]:  -> [Client], want to apply command {true 6041653890570946898 1 false [] 0 0}
[ INFO] 2023/10/28 21:15:53.715 [0]: apply command success
[ INFO] 2023/10/28 21:15:53.715 [0]: rf.applyCond.Wait(), rf.commitIndex=[1], rf.lastApplied=[1]
receive m={true 6041653890570946898 1 false [] 0 0}
[ INFO] 2023/10/28 21:15:53.715 [0]: <- [1], AppendEntries reply={1 true false 0 0 0}
[ INFO] 2023/10/28 21:15:53.715 [0]: rf.matchIndex[1]=[1], rf.nextIndex[1]=[2]
[ INFO] 2023/10/28 21:15:53.715 [0]: rf.nextIndex[1]=[2]
index=[1], [1 / 3]
index=[1], [1 / 3]
[ INFO] 2023/10/28 21:15:53.766 [2]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[1]
[ INFO] 2023/10/28 21:15:53.766 [1]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[1]
[ INFO] 2023/10/28 21:15:53.766 [2]:  -> [Client], want to apply command {true 6041653890570946898 1 false [] 0 0}
receive m={true 6041653890570946898 1 false [] 0 0}
[ INFO] 2023/10/28 21:15:53.766 [2]: apply command success
[ INFO] 2023/10/28 21:15:53.766 [1]:  -> [Client], want to apply command {true 6041653890570946898 1 false [] 0 0}
[ INFO] 2023/10/28 21:15:53.766 [2]: rf.applyCond.Wait(), rf.commitIndex=[1], rf.lastApplied=[1]
[ INFO] 2023/10/28 21:15:53.766 [1]: apply command success
[ INFO] 2023/10/28 21:15:53.766 [1]: rf.applyCond.Wait(), rf.commitIndex=[1], rf.lastApplied=[1]
receive m={true 6041653890570946898 1 false [] 0 0}
index=[1], [3 / 3]
444
cmd=6041653890570946898 is what we submitted
[ INFO] 2023/10/28 21:15:54.282 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.282 [0]: <- [Client], receive command 7689128534546216716
index=[2], [0 / 2]
[ INFO] 2023/10/28 21:15:54.282 [0]: after receive, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716}] 1}
index=[2], [0 / 2]
[ INFO] 2023/10/28 21:15:54.321 [0]: -> [1], leaderSendAppendEntries, args={1 0 1 1 [{1 2 7689128534546216716}] 1}
[ INFO] 2023/10/28 21:15:54.321 [0]: -> [2], leaderSendAppendEntries, args={1 0 1 1 [{1 2 7689128534546216716}] 1}
[ERROR] 2023/10/28 21:15:54.322 [2]: rf.log.lastLog().Index=[1], args.PrevLogIndex=[1]
[ INFO] 2023/10/28 21:15:54.322 [2]: args.Entries=[{1 2 7689128534546216716}], rf.log={[{1 1 6041653890570946898}] 1}
[ INFO] 2023/10/28 21:15:54.322 [2]: append [{1 2 7689128534546216716}]
[ INFO] 2023/10/28 21:15:54.322 [2]: After append, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716}] 1}
[ INFO] 2023/10/28 21:15:54.322 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.322 [0]: -> [2], AppendEntries args=&{1 0 1 1 [{1 2 7689128534546216716}] 1}
[ INFO] 2023/10/28 21:15:54.322 [0]: <- [2], AppendEntries reply={1 true false 0 0 0}
[ INFO] 2023/10/28 21:15:54.322 [0]: rf.matchIndex[2]=[2], rf.nextIndex[2]=[3]
[ INFO] 2023/10/28 21:15:54.322 [0]: rf.nextIndex[2]=[3]
[ INFO] 2023/10/28 21:15:54.322 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[2]
[ INFO] 2023/10/28 21:15:54.322 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[2]
receive m={true 7689128534546216716 2 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.322 [0]:  -> [Client], want to apply command {true 7689128534546216716 2 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.322 [0]: apply command success
index=[2], [1 / 2]
[ INFO] 2023/10/28 21:15:54.322 [0]: rf.applyCond.Wait(), rf.commitIndex=[2], rf.lastApplied=[2]
index=[2], [1 / 2]
index=[2], [1 / 2]
[ INFO] 2023/10/28 21:15:54.372 [0]: -> [1], leaderSendAppendEntries, args={1 0 1 1 [{1 2 7689128534546216716}] 2}
[ INFO] 2023/10/28 21:15:54.372 [2]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[2]
receive m={true 7689128534546216716 2 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.372 [2]:  -> [Client], want to apply command {true 7689128534546216716 2 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.372 [2]: apply command success
[ INFO] 2023/10/28 21:15:54.372 [2]: rf.applyCond.Wait(), rf.commitIndex=[2], rf.lastApplied=[2]
index=[2], [2 / 2]
444
cmd=7689128534546216716 is what we submitted
nn=14
[ INFO] 2023/10/28 21:15:54.384 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.384 [0]: <- [Client], receive command 1515093599100029049
[ INFO] 2023/10/28 21:15:54.384 [0]: after receive, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716} {1 3 1515093599100029049}] 1}
[ INFO] 2023/10/28 21:15:54.384 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.384 [0]: <- [Client], receive command 3634675044113267039
[ INFO] 2023/10/28 21:15:54.384 [0]: after receive, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716} {1 3 1515093599100029049} {1 4 3634675044113267039}] 1}
[ INFO] 2023/10/28 21:15:54.384 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.384 [0]: <- [Client], receive command 8300522718726717687
[ INFO] 2023/10/28 21:15:54.384 [0]: after receive, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716} {1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687}] 1}
[ INFO] 2023/10/28 21:15:54.384 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.384 [0]: <- [Client], receive command 8592383481001922564
[ INFO] 2023/10/28 21:15:54.384 [0]: after receive, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716} {1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564}] 1}
[ INFO] 2023/10/28 21:15:54.384 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.385 [0]: <- [Client], receive command 5871310304256400221
[ INFO] 2023/10/28 21:15:54.385 [0]: after receive, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716} {1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564} {1 7 5871310304256400221}] 1}
[ INFO] 2023/10/28 21:15:54.385 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.385 [0]: <- [Client], receive command 2948376051074850817
[ INFO] 2023/10/28 21:15:54.385 [0]: after receive, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716} {1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564} {1 7 5871310304256400221} {1 8 2948376051074850817}] 1}
[ INFO] 2023/10/28 21:15:54.385 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.385 [0]: <- [Client], receive command 454565725874947556
[ INFO] 2023/10/28 21:15:54.385 [0]: after receive, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716} {1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564} {1 7 5871310304256400221} {1 8 2948376051074850817} {1 9 454565725874947556}] 1}
[ INFO] 2023/10/28 21:15:54.385 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.385 [0]: <- [Client], receive command 5460901661852618733
[ INFO] 2023/10/28 21:15:54.385 [0]: after receive, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716} {1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564} {1 7 5871310304256400221} {1 8 2948376051074850817} {1 9 454565725874947556} {1 10 5460901661852618733}] 1}
[ INFO] 2023/10/28 21:15:54.385 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.385 [0]: <- [Client], receive command 1179156060917138038
[ INFO] 2023/10/28 21:15:54.385 [0]: after receive, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716} {1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564} {1 7 5871310304256400221} {1 8 2948376051074850817} {1 9 454565725874947556} {1 10 5460901661852618733} {1 11 1179156060917138038}] 1}
[ INFO] 2023/10/28 21:15:54.385 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.385 [0]: <- [Client], receive command 2559836895294078560
[ INFO] 2023/10/28 21:15:54.385 [0]: after receive, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716} {1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564} {1 7 5871310304256400221} {1 8 2948376051074850817} {1 9 454565725874947556} {1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560}] 1}
[ INFO] 2023/10/28 21:15:54.385 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.385 [0]: <- [Client], receive command 8123225919929418080
[ INFO] 2023/10/28 21:15:54.385 [0]: after receive, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716} {1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564} {1 7 5871310304256400221} {1 8 2948376051074850817} {1 9 454565725874947556} {1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560} {1 13 8123225919929418080}] 1}
[ INFO] 2023/10/28 21:15:54.385 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.385 [0]: <- [Client], receive command 5878003895595851270
[ INFO] 2023/10/28 21:15:54.385 [0]: after receive, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716} {1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564} {1 7 5871310304256400221} {1 8 2948376051074850817} {1 9 454565725874947556} {1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560} {1 13 8123225919929418080} {1 14 5878003895595851270}] 1}
[ INFO] 2023/10/28 21:15:54.385 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.385 [0]: <- [Client], receive command 6236393673881409638
[ INFO] 2023/10/28 21:15:54.385 [0]: after receive, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716} {1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564} {1 7 5871310304256400221} {1 8 2948376051074850817} {1 9 454565725874947556} {1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560} {1 13 8123225919929418080} {1 14 5878003895595851270} {1 15 6236393673881409638}] 1}
[ INFO] 2023/10/28 21:15:54.385 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.385 [0]: <- [Client], receive command 8255968256543822448
[ INFO] 2023/10/28 21:15:54.385 [0]: after receive, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716} {1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564} {1 7 5871310304256400221} {1 8 2948376051074850817} {1 9 454565725874947556} {1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560} {1 13 8123225919929418080} {1 14 5878003895595851270} {1 15 6236393673881409638} {1 16 8255968256543822448}] 1}
[ INFO] 2023/10/28 21:15:54.385 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.385 [0]: <- [Client], receive command 1781480678493597948
index=[17], [0 / 2]
[ INFO] 2023/10/28 21:15:54.385 [0]: after receive, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716} {1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564} {1 7 5871310304256400221} {1 8 2948376051074850817} {1 9 454565725874947556} {1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560} {1 13 8123225919929418080} {1 14 5878003895595851270} {1 15 6236393673881409638} {1 16 8255968256543822448} {1 17 1781480678493597948}] 1}
index=[17], [0 / 2]
[ INFO] 2023/10/28 21:15:54.422 [0]: -> [1], leaderSendAppendEntries, args={1 0 1 1 [{1 2 7689128534546216716} {1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564} {1 7 5871310304256400221} {1 8 2948376051074850817} {1 9 454565725874947556} {1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560} {1 13 8123225919929418080} {1 14 5878003895595851270} {1 15 6236393673881409638} {1 16 8255968256543822448} {1 17 1781480678493597948}] 2}
[ INFO] 2023/10/28 21:15:54.422 [0]: -> [2], leaderSendAppendEntries, args={1 0 2 1 [{1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564} {1 7 5871310304256400221} {1 8 2948376051074850817} {1 9 454565725874947556} {1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560} {1 13 8123225919929418080} {1 14 5878003895595851270} {1 15 6236393673881409638} {1 16 8255968256543822448} {1 17 1781480678493597948}] 2}
[ERROR] 2023/10/28 21:15:54.423 [2]: rf.log.lastLog().Index=[2], args.PrevLogIndex=[2]
[ INFO] 2023/10/28 21:15:54.423 [2]: args.Entries=[{1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564} {1 7 5871310304256400221} {1 8 2948376051074850817} {1 9 454565725874947556} {1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560} {1 13 8123225919929418080} {1 14 5878003895595851270} {1 15 6236393673881409638} {1 16 8255968256543822448} {1 17 1781480678493597948}], rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716}] 1}
[ INFO] 2023/10/28 21:15:54.423 [2]: append [{1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564} {1 7 5871310304256400221} {1 8 2948376051074850817} {1 9 454565725874947556} {1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560} {1 13 8123225919929418080} {1 14 5878003895595851270} {1 15 6236393673881409638} {1 16 8255968256543822448} {1 17 1781480678493597948}]
[ INFO] 2023/10/28 21:15:54.423 [2]: After append, rf.log={[{1 1 6041653890570946898} {1 2 7689128534546216716} {1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564} {1 7 5871310304256400221} {1 8 2948376051074850817} {1 9 454565725874947556} {1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560} {1 13 8123225919929418080} {1 14 5878003895595851270} {1 15 6236393673881409638} {1 16 8255968256543822448} {1 17 1781480678493597948}] 1}
[ INFO] 2023/10/28 21:15:54.423 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.423 [0]: -> [2], AppendEntries args=&{1 0 2 1 [{1 3 1515093599100029049} {1 4 3634675044113267039} {1 5 8300522718726717687} {1 6 8592383481001922564} {1 7 5871310304256400221} {1 8 2948376051074850817} {1 9 454565725874947556} {1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560} {1 13 8123225919929418080} {1 14 5878003895595851270} {1 15 6236393673881409638} {1 16 8255968256543822448} {1 17 1781480678493597948}] 2}
[ INFO] 2023/10/28 21:15:54.423 [0]: <- [2], AppendEntries reply={1 true false 0 0 0}
[ INFO] 2023/10/28 21:15:54.423 [0]: rf.matchIndex[2]=[17], rf.nextIndex[2]=[18]
[ INFO] 2023/10/28 21:15:54.423 [0]: rf.nextIndex[2]=[18]
[ INFO] 2023/10/28 21:15:54.423 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[3]
[ INFO] 2023/10/28 21:15:54.423 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[3]
[ INFO] 2023/10/28 21:15:54.423 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[4]
[ INFO] 2023/10/28 21:15:54.423 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[4]
[ INFO] 2023/10/28 21:15:54.423 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[5]
[ INFO] 2023/10/28 21:15:54.423 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[5]
[ INFO] 2023/10/28 21:15:54.423 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[6]
[ INFO] 2023/10/28 21:15:54.423 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[6]
[ INFO] 2023/10/28 21:15:54.423 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[7]
[ INFO] 2023/10/28 21:15:54.423 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[7]
[ INFO] 2023/10/28 21:15:54.423 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[8]
[ INFO] 2023/10/28 21:15:54.423 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[8]
[ INFO] 2023/10/28 21:15:54.423 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[9]
[ INFO] 2023/10/28 21:15:54.423 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[9]
[ INFO] 2023/10/28 21:15:54.423 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[10]
[ INFO] 2023/10/28 21:15:54.423 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[10]
[ INFO] 2023/10/28 21:15:54.423 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[11]
[ INFO] 2023/10/28 21:15:54.423 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[11]
[ INFO] 2023/10/28 21:15:54.423 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[12]
[ INFO] 2023/10/28 21:15:54.423 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[12]
[ INFO] 2023/10/28 21:15:54.423 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[13]
[ INFO] 2023/10/28 21:15:54.423 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[13]
[ INFO] 2023/10/28 21:15:54.423 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[14]
[ INFO] 2023/10/28 21:15:54.423 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[14]
[ INFO] 2023/10/28 21:15:54.423 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[15]
[ INFO] 2023/10/28 21:15:54.423 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[15]
[ INFO] 2023/10/28 21:15:54.423 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[16]
[ INFO] 2023/10/28 21:15:54.423 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[16]
[ INFO] 2023/10/28 21:15:54.423 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[17]
[ INFO] 2023/10/28 21:15:54.423 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[17]
[ INFO] 2023/10/28 21:15:54.423 [0]:  -> [Client], want to apply command {true 1515093599100029049 3 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.423 [0]: apply command success
[ INFO] 2023/10/28 21:15:54.423 [0]:  -> [Client], want to apply command {true 3634675044113267039 4 false [] 0 0}
receive m={true 1515093599100029049 3 false [] 0 0}
receive m={true 3634675044113267039 4 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.423 [0]: apply command success
[ INFO] 2023/10/28 21:15:54.423 [0]:  -> [Client], want to apply command {true 8300522718726717687 5 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.423 [0]: apply command success
[ INFO] 2023/10/28 21:15:54.423 [0]:  -> [Client], want to apply command {true 8592383481001922564 6 false [] 0 0}
receive m={true 8300522718726717687 5 false [] 0 0}
receive m={true 8592383481001922564 6 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.423 [0]: apply command success
[ INFO] 2023/10/28 21:15:54.423 [0]:  -> [Client], want to apply command {true 5871310304256400221 7 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.423 [0]: apply command success
[ INFO] 2023/10/28 21:15:54.423 [0]:  -> [Client], want to apply command {true 2948376051074850817 8 false [] 0 0}
receive m={true 5871310304256400221 7 false [] 0 0}
receive m={true 2948376051074850817 8 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.423 [0]: apply command success
[ INFO] 2023/10/28 21:15:54.423 [0]:  -> [Client], want to apply command {true 454565725874947556 9 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.424 [0]: apply command success
[ INFO] 2023/10/28 21:15:54.424 [0]:  -> [Client], want to apply command {true 5460901661852618733 10 false [] 0 0}
receive m={true 454565725874947556 9 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.424 [0]: Snapshot: index=[9], rf.lastIncludedIndex=[0]
[ INFO] 2023/10/28 21:15:54.424 [0]: rf.persist(): save raftstate and snapshot
receive m={true 5460901661852618733 10 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.424 [0]: apply command success
[ INFO] 2023/10/28 21:15:54.424 [0]:  -> [Client], want to apply command {true 1179156060917138038 11 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.424 [0]: apply command success
[ INFO] 2023/10/28 21:15:54.424 [0]:  -> [Client], want to apply command {true 2559836895294078560 12 false [] 0 0}
receive m={true 1179156060917138038 11 false [] 0 0}
receive m={true 2559836895294078560 12 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.424 [0]: apply command success
[ INFO] 2023/10/28 21:15:54.424 [0]:  -> [Client], want to apply command {true 8123225919929418080 13 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.424 [0]: apply command success
[ INFO] 2023/10/28 21:15:54.424 [0]:  -> [Client], want to apply command {true 5878003895595851270 14 false [] 0 0}
receive m={true 8123225919929418080 13 false [] 0 0}
receive m={true 5878003895595851270 14 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.424 [0]: apply command success
[ INFO] 2023/10/28 21:15:54.424 [0]:  -> [Client], want to apply command {true 6236393673881409638 15 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.424 [0]: apply command success
[ INFO] 2023/10/28 21:15:54.424 [0]:  -> [Client], want to apply command {true 8255968256543822448 16 false [] 0 0}
receive m={true 6236393673881409638 15 false [] 0 0}
receive m={true 8255968256543822448 16 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.424 [0]: apply command success
[ INFO] 2023/10/28 21:15:54.424 [0]:  -> [Client], want to apply command {true 1781480678493597948 17 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.424 [0]: apply command success
[ INFO] 2023/10/28 21:15:54.424 [0]: rf.applyCond.Wait(), rf.commitIndex=[17], rf.lastApplied=[17]
receive m={true 1781480678493597948 17 false [] 0 0}
index=[17], [1 / 2]
index=[17], [1 / 2]
index=[17], [1 / 2]
[ INFO] 2023/10/28 21:15:54.472 [0]: -> [1], leaderSendInstallSnapshot, args={1 0 9 1 0 [3 4 0 18 12 255 141 2 1 2 255 142 0 1 16 0 0 255 149 255 142 0 10 0 3 105 110 116 4 10 0 248 167 176 136 104 38 173 18 164 3 105 110 116 4 10 0 248 213 106 139 83 171 228 238 24 3 105 110 116 4 10 0 248 42 13 99 51 191 166 144 242 3 105 110 116 4 10 0 248 100 225 235 99 252 178 114 190 3 105 110 116 4 10 0 248 230 98 194 222 135 136 1 238 3 105 110 116 4 10 0 248 238 124 142 128 206 27 160 8 3 105 110 116 4 10 0 248 162 246 43 58 118 150 54 186 3 105 110 116 4 10 0 248 81 213 120 203 105 43 192 2 3 105 110 116 4 10 0 248 12 157 226 61 19 176 11 200] false}
[ INFO] 2023/10/28 21:15:54.473 [2]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[17]
receive m={true 1515093599100029049 3 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]:  -> [Client], want to apply command {true 1515093599100029049 3 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]: apply command success
receive m={true 3634675044113267039 4 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]:  -> [Client], want to apply command {true 3634675044113267039 4 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]: apply command success
receive m={true 8300522718726717687 5 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]:  -> [Client], want to apply command {true 8300522718726717687 5 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]: apply command success
receive m={true 8592383481001922564 6 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]:  -> [Client], want to apply command {true 8592383481001922564 6 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]: apply command success
receive m={true 5871310304256400221 7 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]:  -> [Client], want to apply command {true 5871310304256400221 7 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]: apply command success
receive m={true 2948376051074850817 8 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]:  -> [Client], want to apply command {true 2948376051074850817 8 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]: apply command success
receive m={true 454565725874947556 9 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]:  -> [Client], want to apply command {true 454565725874947556 9 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]: apply command success
[ INFO] 2023/10/28 21:15:54.473 [2]:  -> [Client], want to apply command {true 5460901661852618733 10 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]: Snapshot: index=[9], rf.lastIncludedIndex=[0]
[ INFO] 2023/10/28 21:15:54.473 [2]: rf.persist(): save raftstate and snapshot
receive m={true 5460901661852618733 10 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]: apply command success
[ INFO] 2023/10/28 21:15:54.473 [2]:  -> [Client], want to apply command {true 1179156060917138038 11 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]: apply command success
[ INFO] 2023/10/28 21:15:54.473 [2]:  -> [Client], want to apply command {true 2559836895294078560 12 false [] 0 0}
receive m={true 1179156060917138038 11 false [] 0 0}
receive m={true 2559836895294078560 12 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]: apply command success
[ INFO] 2023/10/28 21:15:54.473 [2]:  -> [Client], want to apply command {true 8123225919929418080 13 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]: apply command success
[ INFO] 2023/10/28 21:15:54.473 [2]:  -> [Client], want to apply command {true 5878003895595851270 14 false [] 0 0}
receive m={true 8123225919929418080 13 false [] 0 0}
receive m={true 5878003895595851270 14 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]: apply command success
[ INFO] 2023/10/28 21:15:54.473 [2]:  -> [Client], want to apply command {true 6236393673881409638 15 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]: apply command success
[ INFO] 2023/10/28 21:15:54.473 [2]:  -> [Client], want to apply command {true 8255968256543822448 16 false [] 0 0}
receive m={true 6236393673881409638 15 false [] 0 0}
receive m={true 8255968256543822448 16 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]: apply command success
[ INFO] 2023/10/28 21:15:54.473 [2]:  -> [Client], want to apply command {true 1781480678493597948 17 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.473 [2]: apply command success
[ INFO] 2023/10/28 21:15:54.473 [2]: rf.applyCond.Wait(), rf.commitIndex=[17], rf.lastApplied=[17]
receive m={true 1781480678493597948 17 false [] 0 0}
index=[17], [2 / 2]
444
cmd=1781480678493597948 is what we submitted
[ INFO] 2023/10/28 21:15:54.488 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.488 [0]: <- [Client], receive command 3895346216736643801
index=[18], [0 / 3]
[ INFO] 2023/10/28 21:15:54.488 [0]: after receive, rf.log={[{1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560} {1 13 8123225919929418080} {1 14 5878003895595851270} {1 15 6236393673881409638} {1 16 8255968256543822448} {1 17 1781480678493597948} {1 18 3895346216736643801}] 10}
index=[18], [0 / 3]
[ INFO] 2023/10/28 21:15:54.523 [0]: -> [1], leaderSendInstallSnapshot, args={1 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:54.523 [0]: -> [2], leaderSendAppendEntries, args={1 0 17 1 [{1 18 3895346216736643801}] 17}
[ INFO] 2023/10/28 21:15:54.523 [1]: <- [0], receive InstallSnapshot, args=&{1 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:54.523 [1]: InstallSnapshot: failed to read data
[ERROR] 2023/10/28 21:15:54.523 [2]: rf.log.lastLog().Index=[17], args.PrevLogIndex=[17]
[ INFO] 2023/10/28 21:15:54.523 [2]: args.Entries=[{1 18 3895346216736643801}], rf.log={[{1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560} {1 13 8123225919929418080} {1 14 5878003895595851270} {1 15 6236393673881409638} {1 16 8255968256543822448} {1 17 1781480678493597948}] 10}
[ INFO] 2023/10/28 21:15:54.523 [2]: append [{1 18 3895346216736643801}]
[ INFO] 2023/10/28 21:15:54.523 [2]: After append, rf.log={[{1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560} {1 13 8123225919929418080} {1 14 5878003895595851270} {1 15 6236393673881409638} {1 16 8255968256543822448} {1 17 1781480678493597948} {1 18 3895346216736643801}] 10}
[ INFO] 2023/10/28 21:15:54.523 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.523 [0]: -> [2], AppendEntries args=&{1 0 17 1 [{1 18 3895346216736643801}] 17}
[ INFO] 2023/10/28 21:15:54.523 [0]: <- [2], AppendEntries reply={1 true false 0 0 0}
[ INFO] 2023/10/28 21:15:54.523 [0]: rf.matchIndex[2]=[18], rf.nextIndex[2]=[19]
[ INFO] 2023/10/28 21:15:54.523 [0]: rf.nextIndex[2]=[19]
[ INFO] 2023/10/28 21:15:54.523 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[18]
[ INFO] 2023/10/28 21:15:54.523 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[18]
receive m={true 3895346216736643801 18 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.523 [0]:  -> [Client], want to apply command {true 3895346216736643801 18 false [] 0 0}
[ INFO] 2023/10/28 21:15:54.523 [0]: apply command success
[ INFO] 2023/10/28 21:15:54.523 [0]: rf.applyCond.Wait(), rf.commitIndex=[18], rf.lastApplied=[18]
index=[18], [1 / 3]
index=[18], [1 / 3]
index=[18], [1 / 3]
[ INFO] 2023/10/28 21:15:54.573 [0]: -> [1], leaderSendInstallSnapshot, args={1 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:54.574 [2]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[18]
[ INFO] 2023/10/28 21:15:54.574 [1]: <- [0], receive InstallSnapshot, args=&{1 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:54.574 [2]:  -> [Client], want to apply command {true 3895346216736643801 18 false [] 0 0}
[ERROR] 2023/10/28 21:15:54.574 [1]: InstallSnapshot: failed to read data
[ INFO] 2023/10/28 21:15:54.574 [2]: apply command success
[ INFO] 2023/10/28 21:15:54.574 [2]: rf.applyCond.Wait(), rf.commitIndex=[18], rf.lastApplied=[18]
receive m={true 3895346216736643801 18 false [] 0 0}
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:54.623 [0]: -> [1], leaderSendInstallSnapshot, args={1 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:54.624 [1]: <- [0], receive InstallSnapshot, args=&{1 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:54.624 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:54.674 [0]: -> [1], leaderSendInstallSnapshot, args={1 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:54.675 [1]: <- [0], receive InstallSnapshot, args=&{1 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:54.675 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:54.724 [0]: -> [1], leaderSendInstallSnapshot, args={1 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:54.725 [1]: <- [0], receive InstallSnapshot, args=&{1 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:54.725 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:54.774 [1]: rf.persist(): save raftstate
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:54.774 [1]: timeout leader election, rf.currentTerm=[2]
[ INFO] 2023/10/28 21:15:54.774 [0]: -> [1], leaderSendInstallSnapshot, args={1 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:54.775 [0]: <- [1], get vote request, args.Term=[2], rf.currentTerm=[1]
[ INFO] 2023/10/28 21:15:54.775 [0]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:54.775 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.775 [1]: <- [0], receive InstallSnapshot, args=&{1 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:54.775 [0]: upToDate=false, reply=&{2 false}
[ INFO] 2023/10/28 21:15:54.775 [2]: <- [1], get vote request, args.Term=[2], rf.currentTerm=[1]
[ INFO] 2023/10/28 21:15:54.775 [2]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:54.775 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.775 [1]: -> [&{2}], args.Term < rf.currentTerm, reply=%!v(MISSING)
[ INFO] 2023/10/28 21:15:54.775 [2]: upToDate=false, reply=&{2 false}
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:54.825 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.825 [0]: timeout leader election, rf.currentTerm=[3]
[ INFO] 2023/10/28 21:15:54.826 [2]: <- [0], get vote request, args.Term=[3], rf.currentTerm=[2]
[ INFO] 2023/10/28 21:15:54.826 [1]: <- [0], get vote request, args.Term=[3], rf.currentTerm=[2]
[ INFO] 2023/10/28 21:15:54.826 [2]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:54.826 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.826 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.826 [1]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:54.826 [1]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.826 [1]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:54.826 [2]: upToDate=true, reply=&{3 true}
[ INFO] 2023/10/28 21:15:54.826 [1]: upToDate=true, reply=&{3 true}
[ INFO] 2023/10/28 21:15:54.826 [0]: <- [1], get vote, now vote count [2 / 3]
[ INFO] 2023/10/28 21:15:54.826 [0]: become leader, lastLogIndex=[18], len(rf.log)=[9]
[ INFO] 2023/10/28 21:15:54.826 [0]: <- [2], get vote, now vote count [3 / 3]
[ INFO] 2023/10/28 21:15:54.826 [1]: [1]: Conflict1 XTerm -1, XIndex -1, XLen 1
[ INFO] 2023/10/28 21:15:54.826 [0]: [0]: Conflict from 1 raft.AppendEntriesReply{Term:3, Success:false, Conflict:true, XTerm:-1, XIndex:-1, XLen:1}
[ INFO] 2023/10/28 21:15:54.826 [0]: rf.nextIndex[1]=[1]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:54.876 [0]: -> [1], leaderSendInstallSnapshot, args={3 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:54.876 [1]: <- [0], receive InstallSnapshot, args=&{3 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:54.876 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:54.926 [0]: -> [1], leaderSendInstallSnapshot, args={3 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:54.926 [1]: <- [0], receive InstallSnapshot, args=&{3 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:54.926 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:54.977 [0]: -> [1], leaderSendInstallSnapshot, args={3 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:54.977 [1]: <- [0], receive InstallSnapshot, args=&{3 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:54.977 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.027 [0]: -> [1], leaderSendInstallSnapshot, args={3 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.027 [1]: <- [0], receive InstallSnapshot, args=&{3 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:55.028 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.078 [1]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:55.078 [1]: timeout leader election, rf.currentTerm=[4]
[ INFO] 2023/10/28 21:15:55.079 [0]: -> [1], leaderSendInstallSnapshot, args={3 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.079 [2]: <- [1], get vote request, args.Term=[4], rf.currentTerm=[3]
[ INFO] 2023/10/28 21:15:55.079 [2]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:55.079 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:55.079 [2]: upToDate=false, reply=&{4 false}
[ INFO] 2023/10/28 21:15:55.079 [1]: <- [0], receive InstallSnapshot, args=&{3 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.079 [1]: -> [&{4}], args.Term < rf.currentTerm, reply=%!v(MISSING)
[ WARN] 2023/10/28 21:15:55.079 [2]: <- [0], args.Term < rf.currentTerm, reject AppendEntries
[ INFO] 2023/10/28 21:15:55.079 [0]: <- [1], get vote request, args.Term=[4], rf.currentTerm=[3]
[ INFO] 2023/10/28 21:15:55.079 [0]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:55.079 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:55.079 [0]: upToDate=false, reply=&{4 false}
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.180 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:55.180 [0]: timeout leader election, rf.currentTerm=[5]
[ INFO] 2023/10/28 21:15:55.180 [2]: <- [0], get vote request, args.Term=[5], rf.currentTerm=[4]
[ INFO] 2023/10/28 21:15:55.180 [2]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:55.180 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:55.180 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:55.180 [1]: <- [0], get vote request, args.Term=[5], rf.currentTerm=[4]
[ INFO] 2023/10/28 21:15:55.180 [1]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:55.180 [1]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:55.180 [2]: upToDate=true, reply=&{5 true}
[ INFO] 2023/10/28 21:15:55.180 [1]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:55.180 [1]: upToDate=true, reply=&{5 true}
[ INFO] 2023/10/28 21:15:55.180 [0]: <- [2], get vote, now vote count [2 / 3]
[ INFO] 2023/10/28 21:15:55.180 [0]: become leader, lastLogIndex=[18], len(rf.log)=[9]
[ INFO] 2023/10/28 21:15:55.181 [0]: <- [1], get vote, now vote count [3 / 3]
[ INFO] 2023/10/28 21:15:55.181 [1]: [1]: Conflict1 XTerm -1, XIndex -1, XLen 1
[ INFO] 2023/10/28 21:15:55.181 [0]: [0]: Conflict from 1 raft.AppendEntriesReply{Term:5, Success:false, Conflict:true, XTerm:-1, XIndex:-1, XLen:1}
[ INFO] 2023/10/28 21:15:55.181 [0]: rf.nextIndex[1]=[1]
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.230 [0]: -> [1], leaderSendInstallSnapshot, args={5 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.230 [1]: <- [0], receive InstallSnapshot, args=&{5 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:55.230 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.281 [0]: -> [1], leaderSendInstallSnapshot, args={5 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.281 [1]: <- [0], receive InstallSnapshot, args=&{5 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:55.281 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.331 [0]: -> [1], leaderSendInstallSnapshot, args={5 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.332 [1]: <- [0], receive InstallSnapshot, args=&{5 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:55.332 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.382 [0]: -> [1], leaderSendInstallSnapshot, args={5 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.383 [1]: <- [0], receive InstallSnapshot, args=&{5 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:55.383 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.432 [0]: -> [1], leaderSendInstallSnapshot, args={5 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.433 [1]: <- [0], receive InstallSnapshot, args=&{5 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:55.433 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.483 [0]: -> [1], leaderSendInstallSnapshot, args={5 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.483 [1]: <- [0], receive InstallSnapshot, args=&{5 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:55.483 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.533 [1]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:55.533 [1]: timeout leader election, rf.currentTerm=[6]
[ INFO] 2023/10/28 21:15:55.533 [0]: -> [1], leaderSendInstallSnapshot, args={5 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.533 [1]: <- [0], receive InstallSnapshot, args=&{5 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.533 [2]: <- [1], get vote request, args.Term=[6], rf.currentTerm=[5]
[ INFO] 2023/10/28 21:15:55.533 [1]: -> [&{6}], args.Term < rf.currentTerm, reply=%!v(MISSING)
[ INFO] 2023/10/28 21:15:55.533 [0]: <- [1], get vote request, args.Term=[6], rf.currentTerm=[5]
[ INFO] 2023/10/28 21:15:55.533 [2]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:55.533 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:55.533 [0]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:55.533 [2]: upToDate=false, reply=&{6 false}
[ INFO] 2023/10/28 21:15:55.533 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:55.533 [0]: upToDate=false, reply=&{6 false}
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.634 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:55.634 [0]: timeout leader election, rf.currentTerm=[7]
[ INFO] 2023/10/28 21:15:55.634 [1]: <- [0], get vote request, args.Term=[7], rf.currentTerm=[6]
[ INFO] 2023/10/28 21:15:55.634 [1]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:55.634 [2]: <- [0], get vote request, args.Term=[7], rf.currentTerm=[6]
[ INFO] 2023/10/28 21:15:55.635 [1]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:55.635 [2]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:55.635 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:55.635 [1]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:55.635 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:55.635 [1]: upToDate=true, reply=&{7 true}
[ INFO] 2023/10/28 21:15:55.635 [2]: upToDate=true, reply=&{7 true}
[ INFO] 2023/10/28 21:15:55.635 [0]: <- [1], get vote, now vote count [2 / 3]
[ INFO] 2023/10/28 21:15:55.635 [0]: become leader, lastLogIndex=[18], len(rf.log)=[9]
[ INFO] 2023/10/28 21:15:55.635 [0]: <- [2], get vote, now vote count [3 / 3]
[ INFO] 2023/10/28 21:15:55.635 [1]: [1]: Conflict1 XTerm -1, XIndex -1, XLen 1
[ INFO] 2023/10/28 21:15:55.635 [0]: [0]: Conflict from 1 raft.AppendEntriesReply{Term:7, Success:false, Conflict:true, XTerm:-1, XIndex:-1, XLen:1}
[ INFO] 2023/10/28 21:15:55.635 [0]: rf.nextIndex[1]=[1]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.685 [0]: -> [1], leaderSendInstallSnapshot, args={7 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.685 [1]: <- [0], receive InstallSnapshot, args=&{7 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:55.685 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.735 [0]: -> [1], leaderSendInstallSnapshot, args={7 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.735 [1]: <- [0], receive InstallSnapshot, args=&{7 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:55.735 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.786 [0]: -> [1], leaderSendInstallSnapshot, args={7 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.786 [1]: <- [0], receive InstallSnapshot, args=&{7 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:55.786 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.837 [0]: -> [1], leaderSendInstallSnapshot, args={7 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.837 [1]: <- [0], receive InstallSnapshot, args=&{7 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:55.837 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.887 [0]: -> [1], leaderSendInstallSnapshot, args={7 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.887 [1]: <- [0], receive InstallSnapshot, args=&{7 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:55.888 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.937 [0]: -> [1], leaderSendInstallSnapshot, args={7 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.938 [1]: <- [0], receive InstallSnapshot, args=&{7 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:55.938 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:55.988 [0]: -> [1], leaderSendInstallSnapshot, args={7 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:55.988 [1]: <- [0], receive InstallSnapshot, args=&{7 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:55.988 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:56.038 [0]: -> [1], leaderSendInstallSnapshot, args={7 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:56.038 [1]: <- [0], receive InstallSnapshot, args=&{7 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:56.038 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:56.088 [0]: -> [1], leaderSendInstallSnapshot, args={7 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:56.089 [1]: <- [0], receive InstallSnapshot, args=&{7 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:56.089 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:56.138 [0]: -> [1], leaderSendInstallSnapshot, args={7 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:56.139 [1]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:56.139 [1]: timeout leader election, rf.currentTerm=[8]
[ INFO] 2023/10/28 21:15:56.139 [1]: <- [0], receive InstallSnapshot, args=&{7 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:56.139 [1]: -> [&{8}], args.Term < rf.currentTerm, reply=%!v(MISSING)
[ INFO] 2023/10/28 21:15:56.139 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:56.139 [2]: <- [1], get vote request, args.Term=[8], rf.currentTerm=[7]
[ INFO] 2023/10/28 21:15:56.139 [2]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:56.139 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:56.139 [0]: <- [1], get vote request, args.Term=[8], rf.currentTerm=[8]
[ INFO] 2023/10/28 21:15:56.140 [0]: upToDate=false, reply=&{8 false}
[ INFO] 2023/10/28 21:15:56.140 [2]: upToDate=false, reply=&{8 false}
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:56.189 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:56.189 [0]: timeout leader election, rf.currentTerm=[9]
[ INFO] 2023/10/28 21:15:56.189 [1]: <- [0], get vote request, args.Term=[9], rf.currentTerm=[8]
[ INFO] 2023/10/28 21:15:56.189 [2]: <- [0], get vote request, args.Term=[9], rf.currentTerm=[8]
[ INFO] 2023/10/28 21:15:56.189 [1]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:56.189 [1]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:56.189 [1]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:56.189 [1]: upToDate=true, reply=&{9 true}
[ INFO] 2023/10/28 21:15:56.189 [2]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:56.189 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:56.189 [0]: <- [1], get vote, now vote count [2 / 3]
[ INFO] 2023/10/28 21:15:56.190 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:56.190 [2]: upToDate=true, reply=&{9 true}
[ INFO] 2023/10/28 21:15:56.190 [0]: become leader, lastLogIndex=[18], len(rf.log)=[9]
[ INFO] 2023/10/28 21:15:56.190 [0]: <- [2], get vote, now vote count [3 / 3]
[ INFO] 2023/10/28 21:15:56.190 [1]: [1]: Conflict1 XTerm -1, XIndex -1, XLen 1
[ INFO] 2023/10/28 21:15:56.190 [0]: [0]: Conflict from 1 raft.AppendEntriesReply{Term:9, Success:false, Conflict:true, XTerm:-1, XIndex:-1, XLen:1}
[ INFO] 2023/10/28 21:15:56.190 [0]: rf.nextIndex[1]=[1]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:56.240 [0]: -> [1], leaderSendInstallSnapshot, args={9 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:56.240 [1]: <- [0], receive InstallSnapshot, args=&{9 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:56.240 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:56.290 [0]: -> [1], leaderSendInstallSnapshot, args={9 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:56.291 [1]: <- [0], receive InstallSnapshot, args=&{9 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:56.291 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:56.341 [0]: -> [1], leaderSendInstallSnapshot, args={9 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:56.341 [1]: <- [0], receive InstallSnapshot, args=&{9 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:56.341 [1]: InstallSnapshot: failed to read data
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:56.391 [1]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:56.391 [1]: timeout leader election, rf.currentTerm=[10]
[ INFO] 2023/10/28 21:15:56.391 [0]: -> [1], leaderSendInstallSnapshot, args={9 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:56.392 [1]: <- [0], receive InstallSnapshot, args=&{9 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:56.392 [1]: -> [&{10}], args.Term < rf.currentTerm, reply=%!v(MISSING)
[ INFO] 2023/10/28 21:15:56.392 [0]: <- [1], get vote request, args.Term=[10], rf.currentTerm=[9]
[ INFO] 2023/10/28 21:15:56.392 [0]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:56.392 [2]: <- [1], get vote request, args.Term=[10], rf.currentTerm=[9]
[ INFO] 2023/10/28 21:15:56.392 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:56.392 [0]: upToDate=false, reply=&{10 false}
[ INFO] 2023/10/28 21:15:56.392 [2]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:56.392 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:56.392 [2]: upToDate=false, reply=&{10 false}
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
index=[18], [2 / 3]
[ INFO] 2023/10/28 21:15:56.594 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:56.594 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:56.594 [0]: timeout leader election, rf.currentTerm=[11]
[ INFO] 2023/10/28 21:15:56.594 [2]: timeout leader election, rf.currentTerm=[11]
[ INFO] 2023/10/28 21:15:56.594 [2]: <- [0], get vote request, args.Term=[11], rf.currentTerm=[11]
[ INFO] 2023/10/28 21:15:56.594 [2]: upToDate=true, reply=&{11 false}
[ INFO] 2023/10/28 21:15:56.594 [1]: <- [0], get vote request, args.Term=[11], rf.currentTerm=[10]
[ INFO] 2023/10/28 21:15:56.594 [0]: <- [2], get vote request, args.Term=[11], rf.currentTerm=[11]
[ INFO] 2023/10/28 21:15:56.594 [0]: upToDate=true, reply=&{11 false}
[ INFO] 2023/10/28 21:15:56.594 [1]: args.Term > rf.currentTerm, rf.setNewTerm(args.Term)
[ INFO] 2023/10/28 21:15:56.594 [1]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:56.594 [1]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:56.594 [1]: upToDate=true, reply=&{11 true}
[ INFO] 2023/10/28 21:15:56.594 [0]: <- [1], get vote, now vote count [2 / 3]
[ INFO] 2023/10/28 21:15:56.594 [1]: <- [2], get vote request, args.Term=[11], rf.currentTerm=[11]
[ INFO] 2023/10/28 21:15:56.594 [0]: become leader, lastLogIndex=[18], len(rf.log)=[9]
[ INFO] 2023/10/28 21:15:56.594 [1]: upToDate=true, reply=&{11 false}
[ INFO] 2023/10/28 21:15:56.595 [1]: [1]: Conflict1 XTerm -1, XIndex -1, XLen 1
[ INFO] 2023/10/28 21:15:56.595 [0]: [0]: Conflict from 1 raft.AppendEntriesReply{Term:11, Success:false, Conflict:true, XTerm:-1, XIndex:-1, XLen:1}
[ INFO] 2023/10/28 21:15:56.595 [0]: rf.nextIndex[1]=[1]
[ INFO] 2023/10/28 21:15:56.644 [0]: -> [1], leaderSendInstallSnapshot, args={11 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:56.644 [0]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:56.644 [0]: <- [Client], receive command 3895346216736643801
[ INFO] 2023/10/28 21:15:56.644 [1]: <- [0], receive InstallSnapshot, args=&{11 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:56.644 [1]: InstallSnapshot: failed to read data
[ INFO] 2023/10/28 21:15:56.644 [0]: after receive, rf.log={[{1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560} {1 13 8123225919929418080} {1 14 5878003895595851270} {1 15 6236393673881409638} {1 16 8255968256543822448} {1 17 1781480678493597948} {1 18 3895346216736643801} {11 19 3895346216736643801}] 10}
index=[19], [0 / 3]
index=[19], [0 / 3]
index=[19], [0 / 3]
[ INFO] 2023/10/28 21:15:56.695 [0]: -> [1], leaderSendInstallSnapshot, args={11 0 9 1 0 [] false}
[ INFO] 2023/10/28 21:15:56.695 [0]: -> [2], leaderSendAppendEntries, args={11 0 18 1 [{11 19 3895346216736643801}] 18}
[ INFO] 2023/10/28 21:15:56.695 [1]: <- [0], receive InstallSnapshot, args=&{11 0 9 1 0 [] false}
[ERROR] 2023/10/28 21:15:56.695 [1]: InstallSnapshot: failed to read data
[ERROR] 2023/10/28 21:15:56.695 [2]: rf.log.lastLog().Index=[18], args.PrevLogIndex=[18]
[ INFO] 2023/10/28 21:15:56.695 [2]: args.Entries=[{11 19 3895346216736643801}], rf.log={[{1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560} {1 13 8123225919929418080} {1 14 5878003895595851270} {1 15 6236393673881409638} {1 16 8255968256543822448} {1 17 1781480678493597948} {1 18 3895346216736643801}] 10}
[ INFO] 2023/10/28 21:15:56.695 [2]: append [{11 19 3895346216736643801}]
[ INFO] 2023/10/28 21:15:56.695 [2]: After append, rf.log={[{1 10 5460901661852618733} {1 11 1179156060917138038} {1 12 2559836895294078560} {1 13 8123225919929418080} {1 14 5878003895595851270} {1 15 6236393673881409638} {1 16 8255968256543822448} {1 17 1781480678493597948} {1 18 3895346216736643801} {11 19 3895346216736643801}] 10}
[ INFO] 2023/10/28 21:15:56.695 [2]: rf.persist(): save raftstate
[ INFO] 2023/10/28 21:15:56.695 [0]: -> [2], AppendEntries args=&{11 0 18 1 [{11 19 3895346216736643801}] 18}
[ INFO] 2023/10/28 21:15:56.695 [0]: <- [2], AppendEntries reply={11 true false 0 0 0}
[ INFO] 2023/10/28 21:15:56.695 [0]: rf.matchIndex[2]=[19], rf.nextIndex[2]=[20]
[ INFO] 2023/10/28 21:15:56.695 [0]: rf.nextIndex[2]=[20]
[ INFO] 2023/10/28 21:15:56.695 [0]: commit count [2 / 3] , rf.apply(), rf.commitIndex=[19]
[ INFO] 2023/10/28 21:15:56.695 [0]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[19]
receive m={true 3895346216736643801 19 false [] 0 0}
[ INFO] 2023/10/28 21:15:56.695 [0]:  -> [Client], want to apply command {true 3895346216736643801 19 false [] 0 0}
[ INFO] 2023/10/28 21:15:56.695 [0]: apply command success
[ INFO] 2023/10/28 21:15:56.695 [0]: rf.applyCond.Wait(), rf.commitIndex=[19], rf.lastApplied=[19]
[ INFO] 2023/10/28 21:15:56.695 [0]: Snapshot: index=[19], rf.lastIncludedIndex=[9]
[ INFO] 2023/10/28 21:15:56.695 [0]: rf.persist(): save raftstate and snapshot
index=[19], [1 / 3]
index=[19], [1 / 3]
[ INFO] 2023/10/28 21:15:56.745 [0]: -> [1], leaderSendInstallSnapshot, args={11 0 19 11 0 [3 4 0 38 12 255 141 2 1 2 255 142 0 1 16 0 0 254 1 53 255 142 0 20 0 3 105 110 116 4 10 0 248 167 176 136 104 38 173 18 164 3 105 110 116 4 10 0 248 213 106 139 83 171 228 238 24 3 105 110 116 4 10 0 248 42 13 99 51 191 166 144 242 3 105 110 116 4 10 0 248 100 225 235 99 252 178 114 190 3 105 110 116 4 10 0 248 230 98 194 222 135 136 1 238 3 105 110 116 4 10 0 248 238 124 142 128 206 27 160 8 3 105 110 116 4 10 0 248 162 246 43 58 118 150 54 186 3 105 110 116 4 10 0 248 81 213 120 203 105 43 192 2 3 105 110 116 4 10 0 248 12 157 226 61 19 176 11 200 3 105 110 116 4 10 0 248 151 146 10 65 184 33 159 218 3 105 110 116 4 10 0 248 32 186 104 97 67 110 4 236 3 105 110 116 4 10 0 248 71 12 188 47 245 226 124 192 3 105 110 116 4 10 0 248 225 118 253 222 247 71 2 192 3 105 110 116 4 10 0 248 163 37 186 204 210 180 188 12 3 105 110 116 4 10 0 248 173 24 62 2 86 99 176 204 3 105 110 116 4 10 0 248 229 38 46 198 80 100 36 224 3 105 110 116 4 10 0 248 49 114 46 122 15 170 97 248 3 105 110 116 4 10 0 248 108 30 25 125 203 127 181 178 3 105 110 116 4 10 0 248 108 30 25 125 203 127 181 178] false}
[ INFO] 2023/10/28 21:15:56.745 [2]: rf.apply(): rf.applyCond.Broadcast(), rf.commitIndex=[19]
[ INFO] 2023/10/28 21:15:56.745 [1]: <- [0], receive InstallSnapshot, args=&{11 0 19 11 0 [3 4 0 38 12 255 141 2 1 2 255 142 0 1 16 0 0 254 1 53 255 142 0 20 0 3 105 110 116 4 10 0 248 167 176 136 104 38 173 18 164 3 105 110 116 4 10 0 248 213 106 139 83 171 228 238 24 3 105 110 116 4 10 0 248 42 13 99 51 191 166 144 242 3 105 110 116 4 10 0 248 100 225 235 99 252 178 114 190 3 105 110 116 4 10 0 248 230 98 194 222 135 136 1 238 3 105 110 116 4 10 0 248 238 124 142 128 206 27 160 8 3 105 110 116 4 10 0 248 162 246 43 58 118 150 54 186 3 105 110 116 4 10 0 248 81 213 120 203 105 43 192 2 3 105 110 116 4 10 0 248 12 157 226 61 19 176 11 200 3 105 110 116 4 10 0 248 151 146 10 65 184 33 159 218 3 105 110 116 4 10 0 248 32 186 104 97 67 110 4 236 3 105 110 116 4 10 0 248 71 12 188 47 245 226 124 192 3 105 110 116 4 10 0 248 225 118 253 222 247 71 2 192 3 105 110 116 4 10 0 248 163 37 186 204 210 180 188 12 3 105 110 116 4 10 0 248 173 24 62 2 86 99 176 204 3 105 110 116 4 10 0 248 229 38 46 198 80 100 36 224 3 105 110 116 4 10 0 248 49 114 46 122 15 170 97 248 3 105 110 116 4 10 0 248 108 30 25 125 203 127 181 178 3 105 110 116 4 10 0 248 108 30 25 125 203 127 181 178] false}
receive m={true 3895346216736643801 19 false [] 0 0}
[ INFO] 2023/10/28 21:15:56.745 [2]:  -> [Client], want to apply command {true 3895346216736643801 19 false [] 0 0}
[ INFO] 2023/10/28 21:15:56.745 [2]: apply command success
[ INFO] 2023/10/28 21:15:56.745 [2]: rf.applyCond.Wait(), rf.commitIndex=[19], rf.lastApplied=[19]
[ INFO] 2023/10/28 21:15:56.745 [2]: Snapshot: index=[19], rf.lastIncludedIndex=[9]
[ INFO] 2023/10/28 21:15:56.745 [2]: rf.persist(): save raftstate and snapshot
[ INFO] 2023/10/28 21:15:56.745 [1]: CommandIndex=19, rf.log={[{1 1 6041653890570946898}] 1}
[ INFO] 2023/10/28 21:15:56.745 [1]: rf.readPersist(): read raftstate
[ INFO] 2023/10/28 21:15:56.745 [1]:  -> [Client], want to apply snapshot {false <nil> 0 true [3 4 0 38 12 255 141 2 1 2 255 142 0 1 16 0 0 254 1 53 255 142 0 20 0 3 105 110 116 4 10 0 248 167 176 136 104 38 173 18 164 3 105 110 116 4 10 0 248 213 106 139 83 171 228 238 24 3 105 110 116 4 10 0 248 42 13 99 51 191 166 144 242 3 105 110 116 4 10 0 248 100 225 235 99 252 178 114 190 3 105 110 116 4 10 0 248 230 98 194 222 135 136 1 238 3 105 110 116 4 10 0 248 238 124 142 128 206 27 160 8 3 105 110 116 4 10 0 248 162 246 43 58 118 150 54 186 3 105 110 116 4 10 0 248 81 213 120 203 105 43 192 2 3 105 110 116 4 10 0 248 12 157 226 61 19 176 11 200 3 105 110 116 4 10 0 248 151 146 10 65 184 33 159 218 3 105 110 116 4 10 0 248 32 186 104 97 67 110 4 236 3 105 110 116 4 10 0 248 71 12 188 47 245 226 124 192 3 105 110 116 4 10 0 248 225 118 253 222 247 71 2 192 3 105 110 116 4 10 0 248 163 37 186 204 210 180 188 12 3 105 110 116 4 10 0 248 173 24 62 2 86 99 176 204 3 105 110 116 4 10 0 248 229 38 46 198 80 100 36 224 3 105 110 116 4 10 0 248 49 114 46 122 15 170 97 248 3 105 110 116 4 10 0 248 108 30 25 125 203 127 181 178 3 105 110 116 4 10 0 248 108 30 25 125 203 127 181 178] -1 0}
[ INFO] 2023/10/28 21:15:56.745 [1]: apply snapshot success1
[ INFO] 2023/10/28 21:15:56.745 [1]: apply snapshot success2
receive m={false <nil> 0 true [3 4 0 38 12 255 141 2 1 2 255 142 0 1 16 0 0 254 1 53 255 142 0 20 0 3 105 110 116 4 10 0 248 167 176 136 104 38 173 18 164 3 105 110 116 4 10 0 248 213 106 139 83 171 228 238 24 3 105 110 116 4 10 0 248 42 13 99 51 191 166 144 242 3 105 110 116 4 10 0 248 100 225 235 99 252 178 114 190 3 105 110 116 4 10 0 248 230 98 194 222 135 136 1 238 3 105 110 116 4 10 0 248 238 124 142 128 206 27 160 8 3 105 110 116 4 10 0 248 162 246 43 58 118 150 54 186 3 105 110 116 4 10 0 248 81 213 120 203 105 43 192 2 3 105 110 116 4 10 0 248 12 157 226 61 19 176 11 200 3 105 110 116 4 10 0 248 151 146 10 65 184 33 159 218 3 105 110 116 4 10 0 248 32 186 104 97 67 110 4 236 3 105 110 116 4 10 0 248 71 12 188 47 245 226 124 192 3 105 110 116 4 10 0 248 225 118 253 222 247 71 2 192 3 105 110 116 4 10 0 248 163 37 186 204 210 180 188 12 3 105 110 116 4 10 0 248 173 24 62 2 86 99 176 204 3 105 110 116 4 10 0 248 229 38 46 198 80 100 36 224 3 105 110 116 4 10 0 248 49 114 46 122 15 170 97 248 3 105 110 116 4 10 0 248 108 30 25 125 203 127 181 178 3 105 110 116 4 10 0 248 108 30 25 125 203 127 181 178] -1 0}
2023/10/28 21:15:56 apply error: server 1 snapshot doesn't match m.SnapshotIndex
exit status 1
FAIL	6.5840lab2/raft	3.387s
